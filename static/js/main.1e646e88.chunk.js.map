{"version":3,"sources":["life/conway.ts","WrappableArray.tsx","life/generation.ts","components/App.tsx","hooks/useToggle.ts","hooks/useFramerate.ts","index.tsx"],"names":["State","WrappableArray","index","maxIndex","this","length","Array","create","height","width","initial","newKidsOnTheBlock","times","row","fill","push","map","source","mapper","target","rowIndex","colIndex","current","from","reduceNeighbors","generation","neighborUpLeft","get","neighborUp","neighborUpRight","neighborToLeft","neighborToRight","neighborDownLeft","neighborDown","neighborDownRight","fromGeneration","upLeft","up","upRight","toLeft","toRight","downLeft","down","downRight","inert","alive","createGeneration","randomNum","App","useState","setCurrent","framerate","setFramerate","state","setState","useCallback","useToggle","playing","togglePlaying","on","perSecond","callback","callbackRef","useRef","useEffect","start","undefined","id","window","requestAnimationFrame","step","timestamp","cancelAnimationFrame","useFramerate","style","styles","app","htmlFor","type","min","max","value","onChange","event","Number","onClick","grid","cell","margin","display","lineHeight","maxWidth","whiteSpace","wordBreak","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e646e88.chunk.js","sourcesContent":["import randomNum from 'lodash/random';\nimport { create as createGeneration, from as fromGeneration, map, Generation } from '../life/generation';\n\nexport enum State {\n  inert = 0,\n  alive = 1,\n}\n\nexport type Conway = Generation<State>;\n\n/**\n * Create a single \"generation\" of a Conway's game of life.\n */\nexport function create(height: number, width: number): Conway {\n  return createGeneration(height, width, State.inert);\n}\n\n/**\n * Create a Conway's game of life \"generation\" that from a previous generation.\n * @see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\n */\nexport function from(\n  source: Conway,\n  target?: Conway,\n): Conway {\n  return fromGeneration(source, reduceNeighbors, target);\n}\n\n/**\n * Randomize the values of a generation.\n */\nexport function randomize(target: Conway) {\n  return map(\n    target,\n    () => randomNum(0, 1) >= 0.5 ? State.alive : State.inert,\n    target,\n  );\n}\n\nfunction reduceNeighbors(\n  current: State,\n  upLeft: State,\n  up: State,\n  upRight: State,\n  toLeft: State,\n  toRight: State,\n  downLeft: State,\n  down: State,\n  downRight: State,\n): State {\n  const numNeighbors = upLeft + up + upRight + toLeft + toRight + downLeft + down + downRight;\n\n  switch (numNeighbors) {\n    case 0:\n    case 1:\n      return State.inert;\n    case 2:\n      return current;\n    case 3:\n      return State.alive;\n    default:\n      return State.inert;\n  }\n}\n","/**\n * A normal array with a `get` method added allowing negative indexes and indexes greater than the\n * length of the array.\n */\nexport default class WrappableArray<T> extends Array<T> {\n  /**\n   * Get the item at the specified index. Negative indexes will index backwards from the end of the\n   * array. Indexes greater than the length of the array will wrap around and index from the start.\n   *\n   * @example\n   *\n   * const arr = new WrappableArray(1, 2, 3);\n   *\n   * arr.get(1);\n   * // => 2\n   *\n   * arr.get(-1);\n   * // => 3\n   *\n   * arr.get(4);\n   * // => 1\n   */\n  get(index: number): T {\n    const maxIndex = this.length - 1;\n\n    if (index < 0) {\n      return this[maxIndex + index + 1]!;\n    }\n\n    if (index > maxIndex) {\n      return this[index - maxIndex - 1]!;\n    }\n\n    return this[index]!;\n  }\n}\n","import times from 'lodash/times';\nimport WrappableArray from '../WrappableArray';\n\n/**\n * A single generation of a 2-dimensional cellular automata.\n */\nexport type Generation<T> = WrappableArray<WrappableArray<T>>;\n\n/**\n * Create a single \"generation\" of a 2-dimensional cellular automata.\n */\nexport function create<Cell>(height: number, width: number, initial: Cell): Generation<Cell> {\n  const newKidsOnTheBlock: Generation<Cell> = new WrappableArray();\n\n  times(height, () => {\n    const row = (new WrappableArray<Cell>(width)).fill(initial);\n    newKidsOnTheBlock.push(row);\n  });\n\n  return newKidsOnTheBlock;\n}\n\n/**\n * Return a generation that is the result of running a mapping function for every element in an\n * existing generation.\n */\nexport function map<InputCell, OutputCell>(\n  source: Generation<InputCell>,\n  mapper: (curent: InputCell, generation: Generation<InputCell>, row: number, col: number) => OutputCell,\n  // @ts-ignore Each cell value in `target` will be overriden, so the `null` initial value is fine,\n  // even though that may or may not match the type of the generation being created.\n  target = create<OutputCell>(source.length, source[0]!.length, null),\n): Generation<OutputCell> {\n  for (let rowIndex = 0; rowIndex < target.length; rowIndex++) {\n    for (let colIndex = 0; colIndex < target[rowIndex]!.length; colIndex++) {\n      const current = source[rowIndex]![colIndex]!;\n\n      // In case the dimensions of `target` don't match `source`, check that we should set the value\n      // at the current indexes.\n      if (target[rowIndex] && typeof target[rowIndex]![colIndex] !== 'undefined') {\n        target[rowIndex]![colIndex] = mapper(current, source, rowIndex, colIndex);\n      }\n    }\n  }\n  return target;\n}\n\ntype ReduceNeighbors<Cell, Output> = (\n  current: Cell,\n  upLeft: Cell,\n  up: Cell,\n  upRight: Cell,\n  toLeft: Cell,\n  toRight: Cell,\n  downLeft: Cell,\n  down: Cell,\n  downRight: Cell,\n) => Output;\n\n/**\n * Convert from one generation to another according to some rules.\n */\nexport function from<InputCell, OutputCell>(\n  source: Generation<InputCell>,\n  reduceNeighbors: ReduceNeighbors<InputCell, OutputCell>,\n  target?: Generation<OutputCell>,\n): Generation<OutputCell> {\n  return map(\n    source,\n    (current, generation, rowIndex, colIndex) => {\n      const neighborUpLeft    = generation.get(rowIndex - 1).get(colIndex - 1);\n      const neighborUp        = generation.get(rowIndex - 1).get(colIndex);\n      const neighborUpRight   = generation.get(rowIndex - 1).get(colIndex + 1);\n      const neighborToLeft    = generation.get(rowIndex).get(colIndex - 1);\n      const neighborToRight   = generation.get(rowIndex).get(colIndex + 1);\n      const neighborDownLeft  = generation.get(rowIndex + 1).get(colIndex - 1);\n      const neighborDown      = generation.get(rowIndex + 1).get(colIndex);\n      const neighborDownRight = generation.get(rowIndex + 1).get(colIndex + 1);\n\n      return reduceNeighbors(\n        current,\n        neighborUpLeft,\n        neighborUp,\n        neighborUpRight,\n        neighborToLeft,\n        neighborToRight,\n        neighborDownLeft,\n        neighborDown,\n        neighborDownRight,\n      );\n    },\n    target,\n  );\n}\n","import { useState } from 'react';\nimport useFramerate from '../hooks/useFramerate';\nimport useToggle from '../hooks/useToggle';\nimport { create, from, randomize, State } from '../life/conway';\n\nconst size = 50;\nconst initial = randomize(create(size, size));\n\nexport default function App() {\n  const [current, setCurrent] = useState(initial);\n  const [framerate, setFramerate] = useState(5);\n  const [playing, togglePlaying] = useToggle(false);\n\n  useFramerate(playing, framerate, () => {\n    setCurrent(from);\n  });\n\n  return (\n    <div style={styles.app}>\n      <label htmlFor=\"framerate-range\">Framerate</label>\n      <input\n        id=\"framerate-range\"\n        type=\"range\"\n        min=\"1\"\n        max=\"60\"\n        step=\"1\"\n        value={framerate}\n        onChange={(event) => setFramerate(Number(event.target.value))}\n      />\n      <span>{framerate}</span>\n      <button\n        onClick={togglePlaying}\n      >\n        {playing ? 'Stop' : 'Play'}\n      </button>\n      <pre style={styles.grid}>\n        {current.map((row) => {\n          return row.map((cell) => {\n            return cell === State.inert ? '·' : '■';\n          });\n        })}\n      </pre>\n    </div>\n  );\n}\n\nconst styles = {\n  app: {\n    margin: '1rem 2rem',\n  },\n  grid: {\n    display: 'block',\n    lineHeight: 0.6,\n    // Add .5 to the width value. Doing so ensures that Chrome and Safari display the same number\n    // of characters per line that Firefox does...\n    maxWidth: `${size}.5ch`,\n    whiteSpace: 'pre-wrap',\n    wordBreak: 'break-word',\n  },\n};\n","import { useCallback, useState } from 'react';\n\nexport default function useToggle(initial: boolean): [boolean, () => void] {\n  const [state, setState] = useState(initial);\n\n  const toggle = useCallback(() => {\n    setState((current) => !current);\n  }, [setState]);\n\n  return [state, toggle];\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useFramerate(on: boolean, perSecond: number, callback: () => void): void {\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (!on) {\n      return;\n    }\n\n    let start: number | undefined = undefined;\n    let id = window.requestAnimationFrame(step);\n\n    function step(timestamp: number) {\n      if (start === undefined) {\n        start = timestamp;\n      }\n\n      const elapsed = timestamp - start;\n\n      if (elapsed >= 1000 / perSecond) {\n        callbackRef.current();\n        start = timestamp + 1;\n      }\n\n      id = window.requestAnimationFrame(step);\n    }\n\n    return () => {\n      window.cancelAnimationFrame(id);\n    };\n  }, [on, perSecond]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}